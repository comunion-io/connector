// Generated by CoffeeScript 2.3.2
(function() {
  var EventEmitter, _gs, bodyParser, cookieParser, ddao, initDb, moi, shouldCompress;

  global.express = require('express');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  EventEmitter = require('events').EventEmitter;

  // cors = require('cors')
  global._ = require('underscore');

  global._path = __dirname;

  global.util = _.extend(require('./public/ext/common'), require('./public/ext/util'));

  global.app = express();

  global.app.env = app.get('env') !== 'production';

  global.env = app.get('env');

  global.syncTask = require('./sync-task/syncTask').service();

  ddao = require('./service/dao');

  moi = require('mongodb').ObjectID;

  _gs = require('./setting');

  _.extend(global, {
    db: 'comunion',
    favicon: require('serve-favicon'),
    async: require('async'),
    pug: require('pug'),
    fs: require('fs'),
    path: require('path'),
    cheerio: require('cheerio'),
    setting: _.defaults(_gs[env] || {}, _gs.default),
    oid: function(v) {
      if (!v) {
        return new moi();
      } else if (v instanceof moi) {
        return v;
      } else if (_.isString(v) && v.length === 24) {
        return new moi(v);
      } else {
        return v;
      }
    },
    log: function(msg, file = __filename) {
      console.log(new Date().pattern() + ': ' + file);
      return console.log(msg);
    },
    err: function(msg) {
      console.log(new Date().pattern());
      return console.error(msg);
    },
    dao: new ddao(),
    queryUtil: require('./service/dao/queryUtil'),
    gStub: {
      comunion: {}
    },
    sEmail: require('./service/email'),
    gs: function(code, fn) {
      if (gStub[code] && gStub[code][fn]) {
        return gStub[code][fn];
      } else {
        return require(_path + '/service/' + fn);
      }
    },
    ee: new EventEmitter,
    _cache: require("node-smple-cache/Cache").createCache('LRU', 100 * 100),
    _ePool: {},
    _stCache: {},
    _authCtn: {},
    cms: require('./service/cmSession'),
    fetchFile: require('./service/fetchFile'),
    checkUrl: require('./service/checkUrl'),
    request: require('request-promise-native'),
    appCache: {},
    _settingCtn: {},
    _gCache: {},
    tot: function(ms) {
      return new Promise(function(resolve) {
        return setTimeout(resolve, ms);
      });
    },
    gEnt: function(code, ent) {
      var sub;
      sub = _gCache["dbCtn"] != null ? _gCache["dbCtn"] : _gCache["dbCtn"] = {};
      if (!sub[`$${ent}`]) {
        Object.defineProperty(sub, '$' + ent, {
          enumerable: true,
          get: () => {
            return dao.nc(code, ent);
          }
        });
      }
      return sub[`$${ent}`];
    },
    gt: function(code, key) {
      if (this._gCache[code]) {
        return this._gCache[code][key];
      } else {
        return null;
      }
    },
    ggc: async function(code, ent, q) {
      var base, ec, id, rt;
      ec = (base = _gCache[code])[ent] != null ? base[ent] : base[ent] = {};
      id = q.code || q._id || q.key;
      if (!ec[id]) {
        if (rt = (await gEnt(code, ent).findOne(q))) {
          ec[id] = rt;
        }
      }
      return ec[id];
    },
    cggc: function(code, ent) {
      if (_gCache[code]) {
        return _gCache[code][ent] = {};
      }
    },
    sggc: function(code, ent, val) {
      var gc;
      gc = _gCache[code] != null ? _gCache[code] : _gCache[code] = {};
      return gc[ent] = val;
    }
  });

  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
  };

  require('./public/ext/string');

  // view engine setup
  app.set('view engine', 'pug');

  app.set('views', path.join(_path, "public"));

  // app.use(favicon(__dirname + '/public/favicon.ico'))

  // app.use cors()
  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  shouldCompress = function(req) {
    if (req.headers['x-no-compression']) {
      return false;
    } else {
      return true;
    }
  };

  app.use(require('compression')({
    filter: shouldCompress
  }));

  app.use(express.static(path.join(__dirname, 'public')));

  app.disable('x-powered-by');

  app._community = {};

  log('init app');

  initDb = async function() {
    var i, ido, it, k, len, v;
    await dao.initDb(db, setting);
    ido = require('./idx');
    for (k in ido) {
      v = ido[k];
      for (i = 0, len = v.length; i < len; i++) {
        it = v[i];
        dao.index(db, k, it.prop, it.opt);
      }
    }
    return syncTask.start();
  };

  initDb();

  app.use('/', require('./route/prod'));

  require('./controller/afterSave');

  module.exports = app;

}).call(this);
