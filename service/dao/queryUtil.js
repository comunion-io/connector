// Generated by CoffeeScript 2.3.2
var _cv, _type, _wkt, isOid;

isOid = function(v) {
  return _.isString(v) && v.length === 24 && /^(\d|[a-z]){24}$/.test(v);
};

_type = function(type, v) {
  switch (type) {
    case 'i':
      return +v;
    case 'b':
      if (v === 'true') {
        return true;
      } else {
        return false;
      }
      break;
    case 'd':
      return new Date(v);
    default:
      return v;
  }
};

_wkt = function(obj, fu) {
  var it, k, kk, results, rk, type, v, vv;
  results = [];
  for (k in obj) {
    v = obj[k];
    if (_.isArray(v) && k === '$or') {
      results.push((function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = v.length; i < len; i++) {
          it = v[i];
          if (_.isObject(it)) {
            results1.push((function() {
              var results2;
              results2 = [];
              for (kk in it) {
                vv = it[kk];
                if (vv['$exists'] && vv['$exists'] === 'false') {
                  results2.push(vv['$exists'] = false);
                } else {
                  results2.push(void 0);
                }
              }
              return results2;
            })());
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    } else if (k === 'dateStr') {
      results.push(v);
    } else if (k.indexOf('__') > -1) {
      [rk, type] = k.split('__');
      obj[rk] = _type(type, v);
      results.push(util.del(k, obj));
    } else if (v && v.$in) {
      type = v.type;
      v.$in = (function() {
        var i, len, ref, results1;
        ref = v.$in;
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          it = ref[i];
          if (type) {
            results1.push(_type(type, it));
          } else if (isOid(it)) {
            results1.push(oid(it));
          } else {
            results1.push(it);
          }
        }
        return results1;
      })();
      results.push(delete v.type);
    } else if (v && v.$all) {
      results.push(v.$all = (function() {
        var i, len, ref, results1;
        ref = v.$all;
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          it = ref[i];
          if (isOid(it)) {
            results1.push(oid(it));
          } else {
            results1.push(it);
          }
        }
        return results1;
      })());
    } else if (v && v.$elemMatch) {
      continue;
    } else if (_.isObject(v) && !_.isArray(v) && !_.isFunction(v)) {
      results.push(_wkt(v, fu));
    } else {
      results.push(fu(v, k, obj));
    }
  }
  return results;
};

_cv = function(v, k, obj) {
  if (k.charAt(0) === '_' && !(k === '_e' || k === '_id')) {
    return delete obj[k];
  } else {
    return obj[k] = isOid(v) ? oid(v) : k === 'status' || k === 'row' ? +v : v === 'null' ? null : v === 'true' ? true : v === 'false' && (k !== 'gender') ? false : k === 'password' && v.length < 40 ? util.sha256(v) : /^\d{4}-\d{1,2}-\d{1,2}/.test(v) && (v.length < 25) ? new Date(v) : v;
  }
};

module.exports = {
  attrs: function(attr) {
    var i, it, len, op, ref;
    op = {};
    ref = attr.split(',');
    for (i = 0, len = ref.length; i < len; i++) {
      it = ref[i];
      if (it.charAt(0) !== '_') {
        op[it] = 1;
      }
    }
    return op;
  },
  afterPersist: function(item, entity) {
    if (entity === 'community') {
      return app._community[item.url] = item;
    }
  },
  queryClean: function(q) {
    _wkt(q, _cv);
    return q;
  },
  setDate: function(d, isNew) {
    var now;
    if (d) {
      now = Date.now();
      if (isNew) {
        d.dateCreated = now;
      }
      d.lastUpdated = now;
      return d;
    }
  },
  cleanItem: function(q, isNew) {
    var i, it, k, len, v;
    if (_.isArray(q)) {
      for (i = 0, len = q.length; i < len; i++) {
        it = q[i];
        this.cleanItem(it);
      }
    } else {
      for (k in q) {
        v = q[k];
        if ((k.charAt(0) === '_') && (k !== '_id' && k !== '_e')) {
          delete q[k];
        }
      }
      _wkt(q, _cv);
      this.setDate(q, isNew);
    }
    return q;
  }
};
