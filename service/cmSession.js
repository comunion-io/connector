// Generated by CoffeeScript 2.3.2
(function() {
  module.exports = {
    set: function(req, rsp, user, maxAge = Date.day) {
      var token;
      token = util.randomChar(32);
      user.token = token;
      rsp.cookie("token", user.token, {
        maxAge: maxAge
      });
      return dao.save(req.c.code, 'session:_id', user);
    },
    update: function(code, id, opt) {
      return dao.update(code, 'session', {
        _id: id
      }, opt);
    },
    get: async function(req, rsp) {
      var ncs, ret;
      if (ncs = req.cookies.token) {
        ret = (await gEnt(req.c.code, 'session').findOne({
          token: ncs
        }));
        if (ret) {
          return req.session = ret;
        } else {
          return rsp.clearCookie('token');
        }
      }
    },
    del: function(req, rsp) {
      dao.delItem(req.c.code, 'session', {
        _id: req.cookies.token
      });
      return rsp.clearCookie('token');
    },
    required: function(req, rsp, next) {
      var s;
      if ((s = req.session) && !s.can_verify && !s.need_verify) {
        return next();
      } else {
        return rsp.status(360).json({
          msg: '请先登录',
          toUrl: '#!/signin'
        });
      }
    },
    requiredRole: function(role) {
      return function(req, rsp, next) {
        var u;
        if ((u = req.session) && u.roles.findBy('title', role)) {
          return next();
        } else {
          return rsp.status(360).json({
            msg: '请重新登录',
            toUrl: 'signin'
          });
        }
      };
    },
    requiredUser: function(req, rsp, next) {
      var u;
      if ((u = req.session) && u.email === req.body.email) {
        return next();
      } else {
        rsp.status(390);
        return rsp.send({
          msg: '用户权限错误'
        });
      }
    }
  };

}).call(this);
