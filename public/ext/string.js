// Generated by CoffeeScript 2.3.2
_.extend(String.prototype, {
  trim: function() {
    return this.replace(/^\s+|\s+$/g, "");
  },
  capitalize: function() {
    return this.trim().substring(0, 1).toUpperCase() + this.trim().substring(1);
  },
  capAll: function() {
    var c, it, res;
    res = (function() {
      var l, ref, results;
      results = [];
      for (it = l = 1, ref = this.length; (1 <= ref ? l <= ref : l >= ref); it = 1 <= ref ? ++l : --l) {
        c = this.charAt(it);
        if (('A' <= c && c <= 'Z')) {
          results.push(' ' + c);
        } else {
          results.push(c);
        }
      }
      return results;
    }).call(this);
    return this.charAt(0).toUpperCase() + res.join('');
  },
  startsWith: function(pattern) {
    return this.lastIndexOf(pattern, 0) === 0;
  },
  endsWith: function(pattern) {
    var d;
    d = this.length - pattern.length;
    return d >= 0 && this.indexOf(pattern, d) === d;
  },
  has: function(str) {
    return this.indexOf(str) > -1;
  },
  isEmpty: function() {
    return this.length === 0 || this === " " || /^\s*$/.test(this);
  },
  replaceAll: function(s1, s2) {
    return this.replace(new RegExp(s1, "gm"), s2);
  },
  truncate: function(length = 30, truncation = '...') {
    if (this.length > length) {
      return this.slice(0, length - truncation.length) + truncation;
    } else {
      return String(this);
    }
  },
  fileName: function() {
    return this.substr(this.lastIndexOf('/') + 1);
  },
  cep: function() {
    return this.replaceAll('’', "'").replaceAll('“', '"').replaceAll('”', '"').replaceAll('？', '?').replaceAll('‘', "'").replaceAll('；', ";");
  },
  dStr: function(len = 19) {
    return this.replace(/-/g, "-").replace(/[TZ]/g, " ").substr(0, len);
  }
});

String.randomChar = function(len, x = '0123456789qwertyuioplkjhgfdsazxcvbnm') {
  var l, n, ref, ret;
  ret = x.charAt(Math.ceil(Math.random() * 10000000) % x.length);
  for (n = l = 1, ref = len; (1 <= ref ? l <= ref : l >= ref); n = 1 <= ref ? ++l : --l) {
    ret += x.charAt(Math.ceil(Math.random() * 10000000) % x.length);
  }
  return ret;
};

Date.minute = 1000 * 60;

Date.hour = Date.minute * 60;

Date.day = 24 * Date.hour;

Date.week = 7 * Date.day;

_.extend(Date.prototype, {
  minusTime: function(d, type = 'day') {
    var tm;
    if (d) {
      tm = d.getTime ? d.getTime() : d;
      return Math.round((this.getTime() - tm) / Date[type]);
    }
  },
  isSameDay: function(d) {
    return this.getFullYear() === d.getFullYear() && this.getMonth === d.getMonth && this.getDate() === d.getDate();
  },
  addDays: function(d) {
    if (d) {
      this.setTime(this.getTime() + (d * Date.day));
    }
    return this;
  },
  nextWeekDay: function(day = this.getDay()) {
    return this.addDays((day - this.getDay() + 7) % 7);
  },
  lastWeekDay: function(day = this.getDay()) {
    return this.addDays((day - this.getDay() - 7) % 7);
  },
  firstDayOfMonth: function() {
    return new Date(this.getFullYear(), this.getMonth(), 1);
  },
  lastDayOfMonth: function() {
    return new Date(this.getFullYear(), this.getMonth() + 1, 1).addDays(-1);
  },
  monday: function() {
    this.setHours(0, 0, 0, 0);
    if (this.getDay() > 0) {
      return this.addDays(1 - this.getDay());
    } else {
      return this.addDays(1 - 7);
    }
  },
  sunday: function() {
    this.setHours(0, 0, 0, 0);
    if (this.getDay() > 0) {
      return this.addDays(7 - this.getDay());
    } else {
      return this;
    }
  },
  nextMonth: function(day = this.getDate(), n = 1) {
    return new Date(this.getFullYear(), this.getMonth() + n, day);
  },
  lastMonth: function(day = this.getDate(), n = 1) {
    return new Date(this.getFullYear(), this.getMonth() - n, day);
  },
  pattern: function(fmt = 'yyyy-MM-dd HH:mm:ss') {
    var k, o, week;
    if (fmt === 'local') {
      return this.toLocaleString();
    }
    o = {
      'Y+': this.getFullYear(),
      'M+': this.getMonth() + 1,
      'd+': this.getDate(),
      'h+': this.getHours() % 12 === 0 ? 12 : this.getHours() % 12,
      'H+': this.getHours(),
      'm+': this.getMinutes(),
      's+': this.getSeconds(),
      'q+': Math.floor((this.getMonth() + 3) / 3),
      'S': this.getMilliseconds().toPaddedString(3)
    };
    week = {
      '0': '日',
      '1': '一',
      '2': '二',
      '3': '三',
      '4': '四',
      '5': '五',
      '6': '六'
    };
    if (/(y+)/.test(fmt)) {
      fmt = fmt.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
    }
    if (/(E+)/.test(fmt)) {
      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length > 1 ? (RegExp.$1.length === 2 ? '周' : '星期') : '') + week[this.getDay() + '']);
    }
    for (k in o) {
      if (new RegExp('(' + k + ')').test(fmt)) {
        fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
      }
    }
    return fmt;
  }
});

Date.parseLocal = function(time) {
  if (_.isString(time)) {
    if (time.length > 19) {
      time = time.substring(0, 19);
    }
    return new Date((time || "").replace(/-/g, "/").replace(/[TZ]/g, " "));
  } else {
    return new Date(time);
  }
};

_.extend(Number.prototype, {
  toOrdinal: function() {
    var n, ord, suffix;
    n = this % 100;
    suffix = ["th", "st", "nd", "rd", "th"];
    ord = (n < 21 ? (n < 4 ? suffix[n] : suffix[0]) : (n % 10 > 4 ? suffix[0] : suffix[n % 10]));
    return this + ord;
  },
  toPaddedString: function(len) {
    var l, n, ref, str, tn;
    str = '';
    if ((tn = len - this.toString().length) > 0) {
      for (n = l = 1, ref = tn; (1 <= ref ? l <= ref : l >= ref); n = 1 <= ref ? ++l : --l) {
        str += '0';
      }
    }
    return str + this.toString();
  },
  formatMoney: function(cc, c = 2, d = '.', t = ',') {
    var i, j, n, s;
    cc = cf._curCode || '$';
    n = this;
    s = (n < 0 ? " -" : "");
    i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "";
    j = ((j = i.length) > 3 ? j % 3 : 0);
    return cc + s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
  }
});

_.extend(Array.prototype, {
  clear: function() {
    this.length = 0;
    return this;
  },
  last: function(num = 1) {
    return this[this.length - num];
  },
  insert: function(index, item) {
    return this.splice(index, 0, item);
  },
  has: function(val) {
    var i;
    i = this.length;
    while (i--) {
      if (val === this[i]) {
        return true;
      }
    }
    return false;
  },
  includeBy: function(prop, val) {
    var i;
    i = this.length;
    while (i--) {
      if (val === this[i][prop]) {
        return true;
      }
    }
    return false;
  },
  detect: function(val, nv) {
    var i;
    i = 0;
    while (i < this.length) {
      if (this[i] === val) {
        if (nv) {
          this[i] = nv;
        }
        return this[i];
      }
      i++;
    }
    return null;
  },
  remove: function(val, fz) {
    var i;
    i = 0;
    while (i < this.length) {
      if (this[i] === val || (fz && this[i].indexOf(val) > -1)) {
        this.splice(i, 1);
        return val;
      }
      i++;
    }
    return null;
  },
  delBy: function(val, prop = 'id', one) {
    var i, v;
    i = 0;
    v = [];
    while (i < this.length) {
      if ((prop.indexOf('.') > 0 ? util.seqProp(this[i], prop) : this[i][prop]) === val) {
        v.push(this[i]);
        this.splice(i, 1);
        if (one) {
          return v[0];
        }
      } else {
        i++;
      }
    }
    if (v.length) {
      return v;
    } else {
      return null;
    }
  },
  find: function(id) {
    var i;
    i = 0;
    while (i < this.length) {
      if (this[i].id && this[i].id.toString() === id) {
        return this[i];
      }
      i++;
    }
    return null;
  },
  findBy: function(prop, val) {
    var i;
    i = 0;
    while (i < this.length) {
      if (this[i] && (prop.indexOf('.') > 0 ? util.seqProp(this[i], prop) : this[i][prop]) === val) {
        return this[i];
      }
      i++;
    }
    return null;
  },
  findAllBy: function(prop, val) {
    var i, res;
    res = [];
    i = 0;
    while (i < this.length) {
      if ((prop.indexOf('.') > 0 ? util.seqProp(this[i], prop) : this[i][prop]) === val) {
        res.push(this[i]);
      }
      i++;
    }
    return res;
  },
  replaceBy: function(prop, val, item) {
    var i;
    i = 0;
    while (i < this.length) {
      if (this[i][prop] === val) {
        log(item);
        log(i);
        this[i] = item;
      }
      i++;
    }
  },
  addUniq: function(val) {
    if (!this.has(val)) {
      this.push(val);
    }
  },
  sortBy: function(attr, isAsc) {
    this.sort(function(a, b) {
      if (isAsc) {
        if (a[attr] < b[attr]) {
          return -1;
        } else {
          return 1;
        }
      } else {
        if (a[attr] > b[attr]) {
          return -1;
        } else {
          return 1;
        }
      }
    });
    return this;
  },
  pk: function(...prop) {
    var it, l, len1, ref, results;
    ref = this;
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      it = ref[l];
      results.push(_.pk.apply(this, [it].concat(prop)));
    }
    return results;
  },
  pushById: function(obj, k = 'id') {
    if (this.findBy(k, obj[k])) {

    } else {
      return this.push(obj);
    }
  },
  addOrUpdate: function(item, key = 'id') {
    var find, it, l, len1, ref;
    find = false;
    ref = this;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      it = ref[l];
      if (it[key] === item[key]) {
        this[_i] = item;
        find = true;
        break;
      }
    }
    if (!find) {
      return this.push(item);
    }
  },
  concatBy: function(next, key, func = _.extend) {
    var d, it, l, len1;
    for (l = 0, len1 = next.length; l < len1; l++) {
      it = next[l];
      if (key) {
        d = this.findBy(key, it[key]);
        if (d) {
          func(d, it);
        } else {
          this.push(it);
        }
      } else {
        this.push(it);
      }
    }
    return this;
  },
  recSet: function(sub = 'children', fun) {
    var it, l, len1, ref, results;
    ref = this;
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      it = ref[l];
      fun(it);
      if (_.isArray(it[sub])) {
        results.push(it[sub].recSet(sub, fun));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  recFind: function(sub, val, prop = 'id') {
    var it, l, len1, r, ref;
    ref = this;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      it = ref[l];
      if (it[prop] === val) {
        return it;
      }
      if (_.isArray(it[sub])) {
        r = it[sub].recFind(sub, val, prop);
        if (r) {
          return r;
        }
      }
    }
    return null;
  },
  codeBy: function(val, key = 'code') {
    var it, l, len1, results;
    if (_.isString(val)) {
      return this.findBy(key, val);
    } else if (_.isArray(val)) {
      results = [];
      for (l = 0, len1 = val.length; l < len1; l++) {
        it = val[l];
        results.push(this.findBy(key, it));
      }
      return results;
    } else {
      return null;
    }
  }
});

_.extend(_, {
  pk: function(ob, ...prop) {
    var it, l, len1, res;
    if (prop && _.isArray(prop[0])) {
      prop = prop[0];
    }
    if (prop.length === 1) {
      return {
        [`${prop[0]}`]: util.seqProp(ob, prop[0])
      };
    } else if (prop.length > 1) {
      res = {};
      for (l = 0, len1 = prop.length; l < len1; l++) {
        it = prop[l];
        //                res[it.replaceAll('\\.','_')] = util.seqProp ob, it # for group
        res[it] = util.seqProp(ob, it);
      }
      return res;
    } else {
      return {};
    }
  }
});
